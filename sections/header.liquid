{{ 'header.css' | asset_url | stylesheet_tag }}
{{ 'dialog.css' | asset_url | stylesheet_tag }}
{{ 'main-cart.css' | asset_url | stylesheet_tag }}
{{ 'quick-product.css' | asset_url | stylesheet_tag }} {% comment %}Must load here so that there isn't a flash of unstyled cards when the deffered recommendations section loads {% endcomment %}
{{ 'number-input.css' | asset_url | stylesheet_tag }}
{{ 'overlay-nav.css' | asset_url | stylesheet_tag }}

{% liquid
  assign className = 'site-header'
  assign menu_count = 1
  assign img_height = section.settings.logo_height | times: 75 | times: 2 | append: 'px'
  assign logo_alt = section.settings.logo.alt | default: shop.name
  if section.settings.logo_placement == 'center'
    assign menu_count = 2
    assign menu_length = section.settings.menu.links | size
    assign menu_half_length = menu_length | divided_by: 2
    assign main_menu = section.settings.menu.links | slice: 0, menu_half_length
    assign second_menu = section.settings.menu.links | slice: menu_half_length, menu_length
  endif
 %}

{% comment %} Output navigation twice, one to display on scroll up and one that always exists at the top of the page content {% endcomment %}
{% for i in (1..2) %}
  {% assign nav_index = forloop.index %}
  {% assign style = 'on-scroll' %}
  {% if forloop.index0 == 1 %}
    {% assign style = 'relative' %}
  {% endif %}

  <{% if style == "on-scroll" %}sticky-header{% else %}relative-header{% endif %} 
    class="{{ className }} __style-{{ style }} {% if section.settings.always_show_nav %}__always-show-nav{% endif %} {% if menu_count == 2 %}__center-links{% endif %}"
  >
    
    {% comment %} Mobile hamburger button {% endcomment %}
    {% capture hamburger_class %}{{ className }}__hamburger{% endcapture %}
    {% capture hamburger_id %}hamburger-{{ forloop.index }}{% endcapture %}
    {% capture hamburger_content %}{% render 'overlay-nav', nav_index: nav_index %}{% endcapture %}
    {% capture hamburger_title %}{% render 'svg-hamburger' %}{% endcapture %}
    {% assign hamburger_aria_label = 'sections.header.menu' | t %}
    {% render 'dialog' style: "left-drawer", title: hamburger_title, aria_label: hamburger_aria_label, content: hamburger_content, class: hamburger_class, id: hamburger_id %}

    {% comment %} Logo {% endcomment %}
    <div
      class="{{ className }}__logo"
      style="--logoMultiplier: {{ section.settings.logo_height }}"
    >
      <a href="{{ routes.root_url }}">
        {%- if section.settings.logo != blank -%}

          {% render 'next-gen-img',
            image: section.settings.logo,
            height: img_height,
            alt: logo_alt
            preload: true
          %}
        {%- else -%}
          <span class="{{ className }}__logo__text h4">{{ shop.name }}</span>
        {%- endif -%}
      </a>
    </div>

    {% for i in (1..menu_count) %}
      {% assign this_menu = main_menu | default: section.settings.menu.links %}
      {% if i == 2 %}
        {% assign this_menu = second_menu %}
      {% endif %}
      <div class="{{ className }}__col">
        {% comment %} All the links {% endcomment %}
        <nav class="{{ className }}__main">

          {% for primary_link in this_menu %}
            {% comment %} Regular link (no nested links) {% endcomment %}
            {% if primary_link.levels == 0 %}
              <a
                class="{{ className }}__plain-link p-sm"
                href="{{ primary_link.url }}"
                style="--linkOrder: {{ forloop.index0 }}"
                {% if link.current %}
                  aria-current="page"
                {% endif %}
              >
                {{ primary_link.title | escape }}
              </a>

            {% comment %} Link with nested links (dropdown) {% endcomment %}
            {% else %}
              {% capture dropdown %}
                <div class="{{ className }}__dropdown" style="--linkOrder: {{ forloop.index0 }}">
                  <div class="{{ className }}__dropdown__inner">
                    {% assign blockClassName = className | append: "__dropdown__block" %}

                    {% if primary_link.levels == 1 %}
                      {% render 'nav-dropdown-submenu' menu: primary_link.links, className: blockClassName %}
                    {% else %}
                      {% for secondary_link in primary_link.links %}
                        {% render 'nav-dropdown-submenu' label: secondary_link.title, label_link: secondary_link.url, menu: secondary_link.links, className: blockClassName %}
                      {% endfor %}
                    {% endif %}

      
                    {% for block in section.blocks %}
                      {% case block.type %}
                        {% when 'mega_menu' %}
                          {% if block.settings.label == primary_link.title %}
                            {% comment %} Text Block {% endcomment %}
                            {% render 'nav-dropdown-text-block' heading: block.settings.heading_0, text: block.settings.text_0, text_size: block.settings.text_size_0, button_label: block.settings.button_label, button_link: block.settings.button_link, button_color: block.settings.button_color, className: blockClassName %}

                            {% comment %} Promotion 1 {% endcomment %}
                            {% if block.settings.heading_1 or block.settings.image_1 %}
                              {% render 'nav-dropdown-promotion' heading: block.settings.heading_1, text: block.settings.text_1, text_size: block.settings.text_size_1, link: block.settings.link_1, image: block.settings.image_1, className: blockClassName %}
                            {% endif %}

                            {% comment %} Promotion 2 {% endcomment %}
                            {% if block.settings.heading_2 or block.settings.image_2 %}
                              {% render 'nav-dropdown-promotion' heading: block.settings.heading_2, text: block.settings.text_2, text_size: block.settings.text_size_2, link: block.settings.link_2, image: block.settings.image_2, className: blockClassName %}
                            {% endif %}
                            {% break %}
                          {% endif %}

                      {% endcase %}
                    {% endfor %}
                  </div>
                </div>
              {% endcapture %}

              {% capture disclosure_class %}__with-overlay {{ className }}__label p-sm {% if primary_link.levels == 1 %}__skinny{% endif %}{% endcapture %}
              {% capture css_vars %}--linkOrder: {{ forloop.index0 }};{% endcapture %}
              {% capture disclosure_id %}{{ primary_link.title }}-{{ nav_index }}-{{ forloop.index }}{% endcapture %}

              {% render 'disclosure' class: disclosure_class, title: primary_link.title, id: disclosure_id, text: dropdown, style: "blank", css_vars: css_vars %}
            {% endif %}
          {% endfor %}
        </nav>

        {% if i == menu_count %}
          {% comment %} Utility Links {% endcomment %}
          <div class="{{ className }}__utility-links">
            <a href="{{ routes.search_url }}" aria-label="{{ 'general.search.search' | t }}">{% render 'svg-search' %}</a>
            {%- if customer -%}
              <a class="{{ className }}__plain-link p-sm" href="{{ routes.account_url }}">{{ 'sections.header.account' | t }}</a>
            {%- else -%}
              <a class="{{ className }}__plain-link p-sm" href="{{ routes.account_login_url }}">
                {{- 'sections.header.login' | t -}}
              </a>
            {%- endif -%}

            {% comment %} Cart Drawer button {% endcomment %}
            {% capture cart_class %}{{ className }}__utility-links__cart{% endcapture %}
            {% capture cart_id %}cart-{{ forloop.index }}{% endcapture %}
            {% capture cart_title %}
              {% render 'svg-cart' %}
              <span id="CartBubble-{{ forloop.index0 }}">
                {{ cart.item_count }}
              </span>
            {% endcapture %}
            {% capture cart_button_label %}{{ 'sections.cart.view_cart' | t }}{% endcapture %}
            {% assign cart_aria_label = 'sections.cart.view_cart' | t %}
            {% capture cart_content %}
              {% render 'cart-drawer' button_link: routes.cart_url, button_label: cart_button_label, class: "__cart-drawer" %}
            {% endcapture %}
            {% render 'dialog' style: "right-drawer", title: cart_title, content: cart_content, class: cart_class, id: cart_id, aria_label: cart_aria_label %}
          </div>
        {% endif %}
      </div>
    {% endfor %}

  </{% if style == "on-scroll" %}sticky-header{% else %}header{% endif %}>
{% endfor %}

{% javascript %}

  class RelativeHeader extends HTMLElement {
    constructor() {
      super();

      this.header = this;
     // this.hamburgerButton = this.querySelector(".site-header__hamburger");
      this.dropdowns = this.querySelectorAll("details.site-header__label");
      this.setupListener();
    }

    //Add a on click listener to every dropdown button
    setupListener() {
      this.dropdowns.forEach((dropdown) => {
        dropdown.querySelector("summary").addEventListener('click', this.updateActiveDialog.bind(this));
      });
    //  this.hamburgerButton.addEventListener('click', this.updateActiveDialog.bind(this));
    }

    updateActiveDialog(e) {
      let thisDropdown = e.target.parentNode;
      
      //close all other dropdowns
      this.dropdowns.forEach((dropdown) => {
        if ( dropdown != thisDropdown ){
          dropdown.removeAttribute("open");
        }
      })

      //let the header know a dropdown is open
      //if statement is kind of confusing but its whether the element had the open attr at the time of click
      if ( thisDropdown.hasAttribute("open") ) {
        document.body.classList.remove('__mobile-overflow-none');
        this.header.classList.remove('__dropdown-open');

      } else {
        document.body.classList.add('__mobile-overflow-none');
        this.header.classList.add('__dropdown-open');

      }
    }
  }

  customElements.define('relative-header', RelativeHeader);

  class StickyHeader extends RelativeHeader {
    constructor() {
      super();

      document.addEventListener('scroll', this.updateClass.bind(this), false);
      document.lastScollPosition = 0;
    }

    updateClass(e) {

      let scrollPosition = window.pageYOffset;
      let lastScollPosition = e.currentTarget.lastScollPosition;
      let alwaysShowNav = this.classList.contains('__always-show-nav');
      let scrollingDown = false;
      if (lastScollPosition < scrollPosition) {
        scrollingDown = true;
      }

      if ((!scrollingDown && scrollPosition > 200) || (scrollingDown && scrollPosition > 75 && alwaysShowNav)) {
        this.classList.add('__visible');
        this.parentNode.classList.add('__visible-nav');
      } else {
        this.classList.remove('__visible');
        this.parentNode.classList.remove('__visible-nav');
      }

      document.lastScollPosition = scrollPosition;
    }
  }

  customElements.define('sticky-header', StickyHeader);
{% endjavascript %}

{% schema %}
{
  "name": "t:sections.header.name",
  "class": "section-header",
  "settings": [
    {
      "type": "image_picker",
      "id": "logo",
      "label": "t:sections.header.settings.logo.label"
    },
    {
      "type": "range",
      "id": "logo_height",
      "min": 0.5,
      "max": 2,
      "step": 0.1,
      "unit": "x",
      "label": "t:sections.header.settings.logo_height.label",
      "default": 1
    },
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "t:sections.header.settings.link_list.label"
    },
    {
      "type": "radio",
      "id": "logo_placement",
      "label": "t:sections.password-header.settings.logo_placement.label",
      "options": [
        {
          "value": "left",
          "label": "t:sections.password-header.settings.logo_placement.options.label_1"
        },
        {
          "value": "center",
          "label": "t:sections.password-header.settings.logo_placement.options.label_2"
        }
      ],
      "default": "left"
    },
    {
      "id": "always_show_nav",
      "type": "checkbox",
      "label": "t:sections.header.settings.always_show_nav.label",
      "default": false
    }
  ],
  "blocks": [
    {
      "type": "mega_menu",
      "name": "t:sections.header.blocks.mega_menu.name",
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "t:sections.header.blocks.mega_menu.label"
        },
        {
          "type": "header",
          "content": "t:sections.header.blocks.mega_menu.header.content"
        },
        {
          "type": "text",
          "id": "heading_0",
          "label": "t:sections.header.blocks.mega_menu.heading_0.label"
        },
        {
          "type": "inline_richtext",
          "id": "text_0",
          "label": "t:sections.header.blocks.mega_menu.description.label"
        },
        {
          "type": "select",
          "id": "text_size_0",
          "options": [
            {
              "value": "p-sm",
              "label": "t:sections.header.blocks.mega_menu.description_text_size.options.label_1"
            },
            {
              "value": "p",
              "label": "t:sections.header.blocks.mega_menu.description_text_size.options.label_2"
            },
            {
              "value": "p-lg",
              "label": "t:sections.header.blocks.mega_menu.description_text_size.options.label_3"
            }
          ],
          "default": "p-sm",
          "label": "t:sections.header.blocks.mega_menu.description_text_size.label"
        },
        {
          "type": "text",
          "id": "button_label",
          "label": "t:sections.header.blocks.mega_menu.button_label.label"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "t:sections.header.blocks.mega_menu.button_link.label"
        },
        {
          "type": "header",
          "content": "t:sections.header.blocks.mega_menu.header_2.content"
        },
        {
          "type": "text",
          "id": "heading_1",
          "label": "t:sections.header.blocks.mega_menu.heading_1.label"
        },
        {
          "type": "inline_richtext",
          "id": "text_1",
          "label": "t:sections.header.blocks.mega_menu.text_1.label"
        },
        {
          "type": "select",
          "id": "text_size_1",
          "options": [
            {
              "value": "p-sm",
              "label": "t:sections.header.blocks.mega_menu.description_text_size_1.options.label_1"
            },
            {
              "value": "p",
              "label": "t:sections.header.blocks.mega_menu.description_text_size_1.options.label_2"
            },
            {
              "value": "p-lg",
              "label": "t:sections.header.blocks.mega_menu.description_text_size_1.options.label_3"
            }
          ],
          "default": "p-sm",
          "label": "t:sections.header.blocks.mega_menu.description_text_size_1.label"
        },
        {
          "type": "url",
          "id": "link_1",
          "label": "t:sections.header.blocks.mega_menu.link_1.label"
        },
        {
          "type": "image_picker",
          "id": "image_1",
          "label": "t:sections.header.blocks.mega_menu.image_1.label"
        },
        {
          "type": "header",
          "content": "t:sections.header.blocks.mega_menu.header_3.content"
        },
        {
          "type": "text",
          "id": "heading_2",
          "label": "t:sections.header.blocks.mega_menu.heading_2.label"
        },
        {
          "type": "inline_richtext",
          "id": "text_2",
          "label": "t:sections.header.blocks.mega_menu.text_2.label"
        },
        {
          "type": "select",
          "id": "text_size_2",
          "options": [
            {
              "value": "p-sm",
              "label": "t:sections.header.blocks.mega_menu.description_text_size_2.options.label_1"
            },
            {
              "value": "p",
              "label": "t:sections.header.blocks.mega_menu.description_text_size_2.options.label_2"
            },
            {
              "value": "p-lg",
              "label": "t:sections.header.blocks.mega_menu.description_text_size_2.options.label_3"
            }
          ],
          "default": "p-sm",
          "label": "t:sections.header.blocks.mega_menu.description_text_size_2.label"
        },
        {
          "type": "url",
          "id": "link_2",
          "label": "t:sections.header.blocks.mega_menu.link_2.label"
        },
        {
          "type": "image_picker",
          "id": "image_2",
          "label": "t:sections.header.blocks.mega_menu.image_2.label"
        }
      ]
    }
  ]
}
{% endschema %}
