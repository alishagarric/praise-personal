//Main structures
////////////////////////////////////

html {
  height: 100%;
  background: RGB(var(--color-background));
  color: RGB(var(--color-text));

  * {
    font-family: var(--font-body-family);
    font-style: var(--font-body-style);
    font-weight: var(--font-body-weight);
  }
}

body {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  min-height: calc(100% - var(--navWithAnnouncementHeight));

  ::selection {
    background: RGB(var(--color-foreground)); /* WebKit/Blink Browsers */
  }
  ::-moz-selection {
    background: RGB(var(--color-foreground)); /* Gecko Browsers */
  }

  &.__mobile-overflow-none {
    overflow: hidden;
  }

  main {
    > *:first-child {
      margin-top: var(--navWithAnnouncementHeight);
    }
  }
}

//Sections' space and color defaults
////////////////////////////////////
body > main > section > div,
body > main > article > div,
body > div > footer {
  padding: calc(var(--sectionVerticalSpacing) * var(--topSpacingRatio))
    var(--sectionGuttersSpacing)
    calc(var(--sectionVerticalSpacing) * var(--bottomSpacingRatio))
    var(--sectionGuttersSpacing);
  position: relative;
  color: RGB(var(--color-text));

  &:after {
    content: "";
    position: absolute;
    pointer-events: none;
    top: 0;
    bottom: 0;
    left: 50%;
    width: 100vw;
    transform: translateX(-50%);
    background: RGB(var(--color-background));
    z-index: -1;
  }
}

body > main > section {
  max-width: var(--siteMaxWidth);
  margin: 0 auto;
}

//How the nav position effects sticky elements
.__visible-nav + main {
  --stickyElementTransition: translateY(var(--navHeight));
}

//Form styles
////////////////////////////////////
form:not(.__no-form-styles),
.form-styles {
  button,
  input,
  textarea {
    font-family: var(--font-body-family);
    -webkit-appearance: none;
    margin: 0;
  }

  input:not([type="radio"]):not([type="checkbox"]),
  select {
    height: var(--inputHeight);
    padding: 0 calc(var(--inputHeight) / 3);
  }

  input:not([type="radio"]):not([type="checkbox"]),
  textarea,
  select {
    @extend .p-sm;
    margin-bottom: 0;
    border: 1px solid RGB(var(--color-text));
    background: transparent;
    width: 100%;
    border-radius: var(--btnBorderRadius);
  }

  input[type="checkbox"],
  input[type="radio"] {
    border: 1px solid RGB(var(--color-text));
    height: calc(var(--inputHeight) / 2);
    width: calc(var(--inputHeight) / 2);
    position: relative;

    &:checked {
      &::after {
        content: "";
        width: 100%;
        height: 100%;
        position: absolute;
        inset: 0;
        position: absolute;
        transform: scale(0.9);
        background-color: RGBA(var(--color-text) / 0.65);
      }
    }

    + label {
      margin: 0 !important;
      height: calc(var(--inputHeight) / 2);
      line-height: calc(var(--inputHeight) / 2);
      padding-left: calc(var(--inputHeight) / 4);
      white-space: nowwrap;
    }
  }

  input[type="radio"] {
    border-radius: 50%;
  }

  textarea {
    padding: calc(var(--inputHeight) / 3);
  }

  ::placeholder {
    color: RGBA(var(--color-text) / 0.65);
    opacity: 1;
  }
}

.form-styles {
  width: 100%;
  display: flex;
  flex-direction: column;
  max-width: 660px;
  margin: 0 auto;

  &__row {
    display: flex;
  }

  label {
    @extend .p-sm;
    display: inline-block;
    margin-bottom: 0.5rem !important;
  }

  button:not(.__with-underline) {
    margin: 2rem auto 0 auto;
    width: 100%;
    justify-content: center;
    max-width: 350px;

    + button {
      margin-top: 1rem;
    }
  }

  button.__with-underline {
    align-self: center;
  }

  &.__hide-labels-true {
    label {
      display: none;
    }
  }
}

//Button styles
////////////////////////////////////

.btn,
.button,
.shopify-payment-button__button--unbranded,
button,
input[type="submit"] {
  height: var(--btnHeight);
  line-height: var(--btnHeight);
  border-radius: var(--btnBorderRadius);
  background: RGB(var(--color-foreground));
  color: RGB(var(--color-foreground-text));
  padding: 0 calc(var(--btnHeight) * var(--btnSidesSpace));
  display: flex;
  width: fit-content;
  text-transform: uppercase;
  border: none;
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  white-space: nowrap;
  font-size: calc(1rem * var(--font-body-scale));
  letter-spacing: calc(0.05rem * var(--font-body-scale));
  font-weight: 500;
  margin: 1rem 0 0 0;
  align-items: center;
  -webkit-appearance: none;

  &.__with-border {
    background: none;
    border: 2px solid RGB(var(--color-text));
    color: RGB(var(--color-text));
    width: fit-content;
    border-radius: 2px;

    &:hover:not(:disabled):not([aria-disabled="true"]) {
      background: RGB(var(--color-foreground));
      color: RGB(var(--color-foreground-text));

      svg {
        stroke: RGB(var(--color-foreground-text));
      }
    }

    svg {
      stroke: RGB(var(--color-text));
      width: calc(var(--btnHeight) / 3);
      margin-left: calc(var(--btnHeight) / 4);
    }
  }

  &.__with-underline {
    background: none;
    color: RGB(var(--color-text));
    border: none;
    height: auto;
    line-height: 1.2;
    position: relative;
    display: inline-block;
    padding: 0 0 0.25rem 0;
    margin-top: 0;
    margin-bottom: 0;

    &:after {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      height: 1px;
      width: 100%;
      background-color: RGB(var(--color-text));
    }
  }

  &:disabled,
  &[aria-disabled="true"] {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

.__btn-hover {
  &-default {
    .btn,
    button,
    input[type="submit"] {
      &:hover:not(:disabled):not([aria-disabled="true"]) {
        opacity: 0.8;
      }
    }
  }

  &-border {
    .btn,
    button,
    input[type="submit"] {
      &:not(.__with-underline) {
        &:hover:not(:disabled):not([aria-disabled="true"]) {
          outline: 2px solid RGBA(var(--color-text) / 0.5);
        }
      }
    }
  }

  &-shadow {
    .btn,
    button,
    input[type="submit"] {
      &:not(.__with-underline) {
        will-change: transform;
        transition: transform 0.25s ease;

        &:hover:not(:disabled):not([aria-disabled="true"]) {
          box-shadow: 2px 2px 10px 0 RGBA(var(--color-text) / 0.2);
          transform: translate(2px, -3px);
        }
      }
    }
  }
}

// Placeholder SVG styles
.placeholder-svg,
.page-placeholder {
  background: RGB(var(--color-text));
  opacity: 0.7;

  path {
    fill: RGB(var(--color-background));
  }
}

/* Creates clickable overlay backdrop when details is open */
details.overlay[open] > summary::before {
  content: "";
  position: fixed;
  z-index: 2;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  cursor: default;
}

/* Classic arrow, extend this class where arrows are used (pagination and sliders) */

.classic-arrow {
  height: var(--arrowBtnHeight);
  width: var(--arrowBtnHeight);
  padding: 0;
  display: grid;
  place-content: center;
  margin-top: 0;

  svg * {
    fill: RGB(var(--color-foreground-text));
    width: 40%;
    height: auto;
  }

  &.next {
    svg {
      transform: scale(-1);
    }
  }

  &.disabled {
    opacity: 0.5;
    pointer-events: none;
  }
}

//Marquee Styles
////////////////////////////////////
.marquee-styles {
  padding-right: 0 !important;
  padding-left: 0 !important;

  @keyframes textMarquee {
    from {
      transform: translateX(0%);
    }
    to {
      transform: translateX(-100%);
    }
  }

  @keyframes oneFrameTextMarquee {
    from {
      transform: translateX(100vw);
    }
    to {
      transform: translateX(-100%);
    }
  }

  &__inner {
    overflow: hidden;
  }

  &__text {
    will-change: transform;
    width: 100%;
    animation: textMarquee var(--marqueeSpeed) linear infinite;
    margin-bottom: 0 !important;
    width: var(--marqueeCharacterCount);
    text-shadow: var(--marqueeCharacterCount) 0 RGB(var(--color-text)),
      calc(var(--marqueeCharacterCount) * 2) 0 RGB(var(--color-text)),
      calc(var(--marqueeCharacterCount) * 3) 0 RGB(var(--color-text)),
      calc(var(--marqueeCharacterCount) * 4) 0 RGB(var(--color-text)),
      calc(var(--marqueeCharacterCount) * 5) 0 RGB(var(--color-text)),
      calc(var(--marqueeCharacterCount) * 6) 0 RGB(var(--color-text));
  }

  &.__style-fullwidth {
    .marquee-styles {
      &__inner {
        width: 100%;
      }

      &__text {
        width: fit-content;
        text-shadow: none;
        white-space: nowrap;
        animation: oneFrameTextMarquee var(--marqueeSpeed) linear infinite;
      }
    }
  }
}
